[
  {
    "policy_name": "Users can view their own settings",
    "table_name": "user_settings",
    "policy_role": null,
    "command": "r",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update their own settings",
    "table_name": "user_settings",
    "policy_role": null,
    "command": "w",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert their own settings",
    "table_name": "user_settings",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert their own data",
    "table_name": "users",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert share notifications",
    "table_name": "notifications",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "((auth.uid() = user_id) OR ((type = 'share_received'::text) AND (EXISTS ( SELECT 1\n   FROM patient_shares ps\n  WHERE ((ps.shared_with_user_id = notifications.user_id) AND (ps.shared_by_user_id = auth.uid()) AND (ps.id = ((notifications.data ->> 'shareId'::text))::uuid))))))",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their own data",
    "table_name": "users",
    "policy_role": null,
    "command": "r",
    "policy_expression": "((auth.uid() = id) AND ((is_deleted IS NULL) OR (is_deleted = false)))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view details of users they share patients with",
    "table_name": "users",
    "policy_role": null,
    "command": "r",
    "policy_expression": "(EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE (((patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.shared_by_user_id = users.id)) OR ((patient_shares.shared_by_user_id = auth.uid()) AND (patient_shares.shared_with_user_id = users.id)))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update their own data",
    "table_name": "users",
    "policy_role": null,
    "command": "w",
    "policy_expression": "((auth.uid() = id) AND ((is_deleted IS NULL) OR (is_deleted = false)))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their own patients",
    "table_name": "patients",
    "policy_role": null,
    "command": "r",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares ps\n  WHERE ((ps.patient_id = patients.id) AND (ps.shared_with_user_id = auth.uid()) AND ((ps.expires_at IS NULL) OR (ps.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Providers can insert their own patients",
    "table_name": "patients",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Providers can update their own patients",
    "table_name": "patients",
    "policy_role": null,
    "command": "w",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares ps\n  WHERE ((ps.patient_id = patients.id) AND (ps.shared_with_user_id = auth.uid()) AND (ps.access_level = ANY (ARRAY['write'::text, 'admin'::text])) AND ((ps.expires_at IS NULL) OR (ps.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Providers can delete their own patients",
    "table_name": "patients",
    "policy_role": null,
    "command": "d",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares ps\n  WHERE ((ps.patient_id = patients.id) AND (ps.shared_with_user_id = auth.uid()) AND (ps.access_level = 'admin'::text) AND ((ps.expires_at IS NULL) OR (ps.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their own todos",
    "table_name": "todos",
    "policy_role": null,
    "command": "r",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their documents",
    "table_name": "documents",
    "policy_role": null,
    "command": "r",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares ps\n  WHERE ((ps.patient_id = documents.patient_id) AND (ps.shared_with_user_id = auth.uid()) AND (ps.access_level = ANY (ARRAY['read'::text, 'write'::text, 'admin'::text])) AND ((ps.expires_at IS NULL) OR (ps.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert documents",
    "table_name": "documents",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update documents",
    "table_name": "documents",
    "policy_role": null,
    "command": "w",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares ps\n  WHERE ((ps.patient_id = documents.patient_id) AND (ps.shared_with_user_id = auth.uid()) AND (ps.access_level = ANY (ARRAY['write'::text, 'admin'::text])) AND ((ps.expires_at IS NULL) OR (ps.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete documents",
    "table_name": "documents",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert their own todos",
    "table_name": "todos",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update their own todos",
    "table_name": "todos",
    "policy_role": null,
    "command": "w",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete their own todos",
    "table_name": "todos",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view audit logs for their shares",
    "table_name": "share_audit_logs",
    "policy_role": null,
    "command": "r",
    "policy_expression": "((auth.uid() = changed_by_user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares ps\n  WHERE ((ps.id = share_audit_logs.share_id) AND ((ps.shared_by_user_id = auth.uid()) OR (ps.shared_with_user_id = auth.uid()))))) OR (EXISTS ( SELECT 1\n   FROM pending_shares ps\n  WHERE ((ps.id = share_audit_logs.share_id) AND (ps.shared_by_user_id = auth.uid())))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "System can insert audit logs",
    "table_name": "share_audit_logs",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = changed_by_user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "No updates to audit logs",
    "table_name": "share_audit_logs",
    "policy_role": null,
    "command": "w",
    "policy_expression": "false",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "No deletes from audit logs",
    "table_name": "share_audit_logs",
    "policy_role": null,
    "command": "d",
    "policy_expression": "false",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view share analytics",
    "table_name": "share_analytics",
    "policy_role": null,
    "command": "r",
    "policy_expression": "true",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete doctors",
    "table_name": "doctors",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can add patients to family groups",
    "table_name": "patient_family_group",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their family groups",
    "table_name": "family_groups",
    "policy_role": null,
    "command": "r",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can create family groups",
    "table_name": "family_groups",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view shared patients",
    "table_name": "patients",
    "policy_role": null,
    "command": "r",
    "policy_expression": "(EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = patients.id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['read'::text, 'write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now())))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert their own patients",
    "table_name": "patients",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update their own patients",
    "table_name": "patients",
    "policy_role": null,
    "command": "w",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update shared patients",
    "table_name": "patients",
    "policy_role": null,
    "command": "w",
    "policy_expression": "(EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = patients.id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now())))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete their own patients",
    "table_name": "patients",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their patient_doctors",
    "table_name": "patient_doctors",
    "policy_role": null,
    "command": "r",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = patient_doctors.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['read'::text, 'write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert patient_doctors",
    "table_name": "patient_doctors",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update doctors",
    "table_name": "doctors",
    "policy_role": null,
    "command": "w",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update patient_doctors",
    "table_name": "patient_doctors",
    "policy_role": null,
    "command": "w",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = patient_doctors.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete patient_doctors",
    "table_name": "patient_doctors",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their vitals",
    "table_name": "vitals",
    "policy_role": null,
    "command": "r",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = vitals.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['read'::text, 'write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert vitals",
    "table_name": "vitals",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update vitals",
    "table_name": "vitals",
    "policy_role": null,
    "command": "w",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = vitals.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete vitals",
    "table_name": "vitals",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their doctors",
    "table_name": "doctors",
    "policy_role": null,
    "command": "r",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert doctors",
    "table_name": "doctors",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their appointments",
    "table_name": "appointments",
    "policy_role": null,
    "command": "r",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = appointments.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['read'::text, 'write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert appointments",
    "table_name": "appointments",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update appointments",
    "table_name": "appointments",
    "policy_role": null,
    "command": "w",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = appointments.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete appointments",
    "table_name": "appointments",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update their family groups",
    "table_name": "family_groups",
    "policy_role": null,
    "command": "w",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete their family groups",
    "table_name": "family_groups",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their medications",
    "table_name": "medications",
    "policy_role": null,
    "command": "r",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = medications.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['read'::text, 'write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert medications",
    "table_name": "medications",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update medications",
    "table_name": "medications",
    "policy_role": null,
    "command": "w",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = medications.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete medications",
    "table_name": "medications",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their family group memberships",
    "table_name": "user_family_group",
    "policy_role": null,
    "command": "r",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can join family groups",
    "table_name": "user_family_group",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their notes",
    "table_name": "notes",
    "policy_role": null,
    "command": "r",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = notes.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['read'::text, 'write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert notes",
    "table_name": "notes",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update notes",
    "table_name": "notes",
    "policy_role": null,
    "command": "w",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = notes.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete notes",
    "table_name": "notes",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their prescriptions",
    "table_name": "prescriptions",
    "policy_role": null,
    "command": "r",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = prescriptions.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['read'::text, 'write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can insert prescriptions",
    "table_name": "prescriptions",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can leave family groups",
    "table_name": "user_family_group",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their patient family groups",
    "table_name": "patient_family_group",
    "policy_role": null,
    "command": "r",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update prescriptions",
    "table_name": "prescriptions",
    "policy_role": null,
    "command": "w",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = prescriptions.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete prescriptions",
    "table_name": "prescriptions",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view shares they created",
    "table_name": "patient_shares",
    "policy_role": null,
    "command": "r",
    "policy_expression": "(auth.uid() = shared_by_user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view shares they received",
    "table_name": "patient_shares",
    "policy_role": null,
    "command": "r",
    "policy_expression": "(auth.uid() = shared_with_user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can create shares for their patients",
    "table_name": "patient_shares",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(EXISTS ( SELECT 1\n   FROM patients\n  WHERE ((patients.id = patient_shares.patient_id) AND (patients.user_id = auth.uid()))))",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update shares they created",
    "table_name": "patient_shares",
    "policy_role": null,
    "command": "w",
    "policy_expression": "(auth.uid() = shared_by_user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete shares they created",
    "table_name": "patient_shares",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = shared_by_user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view pending shares they created",
    "table_name": "pending_shares",
    "policy_role": null,
    "command": "r",
    "policy_expression": "(auth.uid() = shared_by_user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can create pending shares",
    "table_name": "pending_shares",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = shared_by_user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update their pending shares",
    "table_name": "pending_shares",
    "policy_role": null,
    "command": "w",
    "policy_expression": "(auth.uid() = shared_by_user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete their pending shares",
    "table_name": "pending_shares",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = shared_by_user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update patient family group relationships",
    "table_name": "patient_family_group",
    "policy_role": null,
    "command": "w",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can remove patients from family groups",
    "table_name": "patient_family_group",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their notifications",
    "table_name": "notifications",
    "policy_role": null,
    "command": "r",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update their notifications",
    "table_name": "notifications",
    "policy_role": null,
    "command": "w",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can view their timeline events",
    "table_name": "timeline_events",
    "policy_role": null,
    "command": "r",
    "policy_expression": "((auth.uid() = user_id) OR (EXISTS ( SELECT 1\n   FROM patient_shares\n  WHERE ((patient_shares.patient_id = timeline_events.patient_id) AND (patient_shares.shared_with_user_id = auth.uid()) AND (patient_shares.access_level = ANY (ARRAY['read'::text, 'write'::text, 'admin'::text])) AND ((patient_shares.expires_at IS NULL) OR (patient_shares.expires_at > now()))))))",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can create timeline events",
    "table_name": "timeline_events",
    "policy_role": null,
    "command": "a",
    "policy_expression": null,
    "with_check_expression": "(auth.uid() = user_id)",
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can update timeline events",
    "table_name": "timeline_events",
    "policy_role": null,
    "command": "w",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  },
  {
    "policy_name": "Users can delete timeline events",
    "table_name": "timeline_events",
    "policy_role": null,
    "command": "d",
    "policy_expression": "(auth.uid() = user_id)",
    "with_check_expression": null,
    "policy_type": "PERMISSIVE"
  }
]